01 不用额外变量交换两个数的值
#include<iostream>
#include<vector>
using namespace std;
void Swapl(int a,int b) {
	a = a ^ b;b = a ^ b;a = a ^ b;
	cout << a << " " << b;
}
int main() {
	int a = 2, b = 1, c = 2, d = 1;
	swapl(a, b);
	cout <<endl;
	Swapl(c, d);
	return 0;
	system("pause");
}
02 不用额外变量交换数组（动态数组）中两个数的值
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
class Solution {
public:
    static void Swapl(int &a, int &b) {
        a = a ^ b; b = a ^ b; a = a ^ b;
    }
};
//for test
int main(){
    vector<int>test{ 5,5,4,3,2,3,6,7 };
    for (int i = 0; i < test.size()-1; i++) {
        Solution::Swapl(test[i], test[i + 1]);
    }
    for (int i = 0; i < test.size(); i++) {
        cout << test[i] << " ";
    }
    return 0;
    system("pause");
}
03 一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数
#include<iostream>
using namespace std;
//位运算，一个数组中有一种数出现奇数次其他的数都出现偶数次，找这个奇数次的数
int findoddnum(int arr[], int n) {
	int Eor = arr[0];
	for (int i = 1; i < n; i++) {
		Eor=Eor^arr[i];
	}
	return Eor;
}
04 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数 
void findoddnum1(int arr[], int n) {
	int Eor = arr[0];
	for (int i = 1; i < n; i++) {
		Eor = Eor ^ arr[i];
	}
	int rightone = Eor & (~Eor + 1);
    
	int onlyone = 0;
	for (int j = 0; j < n; j++) {
		if (arr[j] & rightone !=0) {
			onlyone = onlyone ^ arr[j];
		}
	}
	cout << onlyone << "+" << (onlyone ^ Eor);
}
int main() {
	int list[14] = { 2,2,4,4,3,2,2,0,0,1,1,4 };
	findoddnum1(list, 12);
	return 0;
	system("pause");
}

05 怎么把一个int类型的数，提取出二进制中最右侧的1来

//1 int rightone = Eor & (~Eor + 1);提取出Eor最右侧的1.
//2 判断该数是否为2的指数次幂 
if(Eor&(Eor-1)){
return true;}

06 一个数组中有一种数出现K次，其他数都出现了M次，已知M > 1，K < M，找到出现了K次的数要求额外空间复杂度O(1)，
时间复杂度O(N)
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
//请保证arr中，只有一种数出现了K次，其他数都出现了M次,找到出现k的次的数
class Solution {
public:
    static int km(vector<int>& a, int k, int m) {
        vector<int>help(32, 0);
        for (auto num : a) {
            for (int i = 0; i < 32; i++) {
                help[i] += (num >> i) & 1;//将每个数组中的数二进制形式存入到辅助数组中
                //每个数组维护数位中数组二进制1在相应位上的数量，且help[0]为最低位
            }
        }
        int ans = 0;
        for (int j = 0; j < 32; j++) {
            help[j] %= m;
            if (help[j] != 0) {
                ans |= 1 << j;//异或结果
            }
        }
        return ans;
    }
};
//for test
int main(){
    vector<int>test{ 5,5,2,2,3,3,3,3,5,5};
    cout<<Solution::km(test, 2, 4);
    return 0;
    system("pause");
    }
