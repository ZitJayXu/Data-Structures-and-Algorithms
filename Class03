01 反转单链表、反转双链表
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
//反转单链表
    //定义节点
    struct Node {
        int value;
        struct Node *next;
    };

    Node* reverseLinklist(Node* phead) {
        Node *pre =nullptr;
        Node* next = nullptr;
        while (phead!=nullptr) {
            next = phead->next;
            phead->next = pre;
            pre = phead;
            phead = next;
        }
        return pre;
    }
    Node* createnode(vector<int>a)//建立单链表并传入数据
    {
       Node* head = new Node();
        Node* cur = head;
        for (int i = 0; i < a.size() - 1; i++) {
            head->value = a[i];
            head->next = NULL;

            Node* p = new Node();
            p->value = a[i + 1];
            p->next = NULL;

            head->next = p;
            head = head->next;
        }
        head->next = NULL;
        return cur;
    }
    void PrintNode(Node* list)//打印表单
    {
        Node* p;
        p = list;
        while (p != NULL)
        {
            cout << p->value << endl;
            p = p->next;
        }
    }
//for test
int main(){
    vector<int>test{1,2,3,4,5};
    Node* Head= createnode(test);
     PrintNode(Head);
     cout << "反转后" << endl;
     Node *ans=reverseLinklist(Head);
     PrintNode(ans);
    return 0;
}
02 在链表中删除指定值的所有节点
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
//删除指定数字的节点
    //定义节点
    struct Node {
        int value;
        struct Node *next;
    };

    Node* removeValue(Node* phead,int num) {
        Node *pre =phead;
        Node* cur = phead;
        while (phead!=nullptr){//排除头节点为待删节点情况
            if (phead->value != num) {
                break;
            }
            phead = phead->next;
        }
        while (cur != nullptr) {
            if (cur->value == num) {
                pre->next = cur->next;
            }
            else {
                pre = cur;
            }
            cur = cur->next;
        }
        return phead;
    }
    Node* createnode(vector<int>a)//建立单链表并传入数据
    {
       Node* head = new Node();
        Node* cur = head;
        for (int i = 0; i < a.size() - 1; i++) {
            head->value = a[i];
            head->next = NULL;

            Node* p = new Node();
            p->value = a[i + 1];
            p->next = NULL;

            head->next = p;
            head = head->next;
        }
        head->next = NULL;
        return cur;
    }
    void PrintNode(Node* list)//打印表单
    {
        Node* p;
        p = list;
        while (p != NULL)
        {
            cout << p->value << endl;
            p = p->next;
        }
    }
//for test
int main(){
    vector<int>test{1,2,3,4,5};
    Node* Head= createnode(test);
     PrintNode(Head);
     cout << "删除后" << endl;
     Node *ans=removeValue(Head,3);
     PrintNode(ans);
    return 0;
}

03 用双链表实现栈和队列
04 用环形数组实现栈和队列
05 实现有getMin功能的栈

06 两个栈实现队列
#include <iostream>
#include<stack>
using namespace std; 
stack<int>stackPush,stackPush1,stackPop;
//将push栈中的元素倒入pop栈中
void PushtoPop() {
	if (stackPop.empty()) {
		while (!stackPush.empty()) {
			stackPop.push(stackPush.top());
			stackPush.pop();
		}
	}
}
//添加栈中的元素
void add1(int PushInt) {
	stackPush1.push(PushInt);
}
void add(int PushInt) {
	stackPush.push(PushInt);
}
void stackprint() {
	cout << "添加数据为" << endl;
	cout << "1 2 3 4" << endl;
	cout << "在栈中输出顺序为：" << endl;
	while (!stackPush1.empty()) {
		cout << stackPush1.top()<<" ";
		stackPush1.pop();
	}
	cout << endl;
}
void TowStackpeek() {
	if (stackPop.empty() && stackPush.empty()) {
		cout << "Queue is empty" << endl;
	}
	PushtoPop();
	cout << "用两个栈实现队列的先入先出：" << endl;
	while (!stackPop.empty()) {
		int ans = stackPop.top();
		cout << ans <<" ";
		stackPop.pop();
	}
}

//for test
int main(){
	add(1); add(2); add(3); add(4);
	add1(1); add1(2); add1(3); add1(4);
	stackprint();
	TowStackpeek();
	cout << endl;
	system("pause");
    return 0;
}
07 两个队列实现栈
#include <iostream>

#include <queue>
using namespace std;

template <class T>
class Cstack {

public:
	Cstack() {}
	~Cstack() {}
	void push(const T& val) {
		if (queue1.empty() && queue2.empty()) {
			queue1.push(val);
		}
		if (queue2.empty()) {
			queue1.push(val);
		}
		else {
			queue2.push(val);
		}
	}
	T pop() {
		if (queue1.empty()) {
			if (queue2.empty()) {
				cout << "stack is empty" << endl;
			}
			else {
				if (queue2.size() == 1) {
					T result = queue2.front();
					queue2.pop();
					return  result;
				}
				else {
					while (queue2.size() != 1) {
						queue1.push(queue2.front());
						queue2.pop();
					}
					T result = queue2.front();
					queue2.pop();
					return result;
				}
			}
		}
		else          //如果queue1不为空
		{
			if (queue1.size() == 1)     //如果queue1中只有队尾元素时，直接退出
			{
				T result = queue1.front();
				queue1.pop();
				return result;
			}

			else {
				while (queue1.size() != 1) {
					queue2.push(queue1.front());
					queue1.pop();
				}
				T result = queue1.front();
				queue1.pop();
				return result;
			}
		}

	}
private:
	queue<T> queue1;
	queue<T> queue2;
};

int main()
{
	Cstack<char> stack;
	//测试用例1:
	stack.push('a');           //元素a入栈
	stack.push('b');           //元素b入栈
	stack.push('c');           //元素c入栈
	stack.push('d');           //元素d入栈
	cout << "第1次出栈元素是：" << stack.pop() << endl;
	cout << "第2次出栈元素是：" << stack.pop() << endl;
	cout << "第3次出栈元素是：" << stack.pop() << endl;
	cout << "第4次出栈元素是：" << stack.pop() << endl;
	system("pause");
	return 0;
}
08 用递归行为得到数组中的最大值，并用master公式来估计时间复杂度
#include <iostream>
#include<vector>
using namespace std;
int process(vector<int>& b, int L, int R){
	//数组为一个数字的情况
	if (L == R) {
		return b[L];
	}
	else {
		int mid = L + ((R - L) >> 1);
		int RMax = process(b, mid + 1, R);
		int LMax = process(b, L, mid);
		//将数组划分为左小区和右小区返回最大值
		return max(LMax, RMax);
	}
 }
int getMAx(vector<int>&a) {
	return process(a, 0, a.size()-1);
}

int main(){
//测试用例1:
	vector<int>arr{ 4,3,5,6,7,1,2,3,7,9,5,4 };
	cout << "最大值：" << endl;
	cout<<getMAx(arr)<<endl;
	system("pause");
	return 0;

}
09 哈希表和有序表使用的code展示
#include <iostream>
#include<vector>
#include<unordered_map>
using namespace std;
unordered_map<int,int>m;
int main(){
//哈希表的插入
	m.insert(pair<int, int>(1, 10));
	m.insert(make_pair<int, int>(2, 6));

 //哈希表的遍历
	for (auto it = m.begin(); it != m.end(); it++)
	{
		int front = it->first;   //key
		int end = it->second; //value
		cout <<"键为：" << front << " ";
		cout << "值为：" << end << endl;
	}
	//哈希表的查找
	int key = 0;
	cout << "输入查找";
	cin >> key;
	auto element = m.find(key);
	if (element != m.end()) {
		cout << "找到了value " << element->second << endl;
	}
	else {
		cout << "没找到" << endl;
	}
	system("pause");
	return 0;
}
